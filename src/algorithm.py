"""
This file contains a generic template that can be extended
to implement genetic evolution algorithms to evolve a clew
of camo worms.
"""
import time
import numpy as np
from typing import List, Tuple

from skimage.metrics import structural_similarity

from src.plotting import Drawing
from src.worm import Camo_Worm
from src.worm_mask import WormMask


class GeneticClewEvolution:
    """
    Provides methods to evolve a clew of camo worms
    to clean up an image using a basic genetic algorithm.
    """
    def __init__(self, image, clew: List[Camo_Worm], *, name="Clew"):
        self.name = name
        self.image = image
        self.clew = clew
        self.clew_masks = [WormMask(worm, image) for worm in clew]
        for index in range(len(self.clew)):
            colour = self.clew_masks[index].mean_colour
            if colour is not None:
                self.clew[index].colour = self.clew_masks[index].mean_colour

        self.generation = 0
        self.generation_scores = [self.score_clew()]

    def score(self, worm: Camo_Worm, worm_mask: WormMask) -> float:
        """
        Calculates the score of the given worm.
        """
        raise Exception("score is unimplemented for {}".format(type(self).__name__))

    def update(self, worm: Camo_Worm, worm_mask: WormMask) -> Tuple[Camo_Worm, WormMask]:
        """
        Creates
        """
        raise Exception("update is unimplemented for {}".format(type(self).__name__))

    def score_clew(self) -> float:
        """
        Compares the image generated by drawing all worms in the clew
        to the original image. This uses the structural similarity
        index to compare the images.
        A value of 1 is the best possible comparison, and -1 is the
        worst possible comparison.
        """
        generated = self.draw_clew()
        return structural_similarity(self.image, generated, data_range=255)

    def draw_clew(self, image=None):
        """
        Draws the worm masks of the worms in the clew into image.
        """
        image = np.zeros(self.image.shape) if image is None else image
        image = image.copy()

        for worm, mask in zip(self.clew, self.clew_masks):
            mask.draw_into(image, worm.colour * 255.0)

        return image

    def plot_clew(self, include_target_image: bool = False):
        """
        Draws the current clew of worms on the image.
        """
        if include_target_image:
            drawing = Drawing(self.image)
            drawing.show(title="Target Image")

        background = self.image * 0.5
        drawing = Drawing(self.draw_clew(background))
        drawing.show(title="{} gen-{}".format(self.name, self.generation))

    def run_generations(self, generations):
        """
        Runs the given number of generations of evolution.
        """
        for i in range(generations):
            self.run_generation()

    def run_generation(self):
        """
        Evolves a single generation.
        """
        start_time = time.time()

        for index in range(len(self.clew)):
            worm = self.clew[index]
            worm_mask = self.clew_masks[index]
            new_worm, new_worm_mask = self.update(worm, worm_mask)
            self.clew[index] = new_worm
            self.clew_masks[index] = new_worm_mask

        self.generation += 1

        new_score = self.score_clew()
        self.generation_scores.append(new_score)

        duration = time.time() - start_time
        print("Generation {}: {:.3f}  (took {:.2f} seconds)".format(
            self.generation, new_score, duration
        ))
