"""
This file contains a generic template that can be extended
to implement genetic evolution algorithms to evolve a clew
of camo worms.
"""
import time
import numpy as np
from typing import Tuple, Optional

from skimage.metrics import structural_similarity

from src import NpImage
from src.algorithms.local_search import locally_optimise_worm
from src.image_manipulation import find_median_colour
from src.progress_image_generator import ProgressImageGenerator
from src.worm import CamoWorm
from src.worm_mask import WormMask


class GeneticClewEvolution:
    """
    Provides methods to evolve a clew of camo worms
    to clean up an image using a basic genetic algorithm.
    """

    def __init__(
            self, image: NpImage, initial_clew_size: int,
            *, name="Clew", evolve_clew_size: bool = True, progress_dir: Optional[str] = "progress"):

        self.name = name
        self.evolve_clew_size = evolve_clew_size
        self.image = image

        self.clew: list[CamoWorm] = []
        self.clew_masks: list[WormMask] = []
        for _ in range(initial_clew_size):
            self.add_new_random_worm()

        for index in range(len(self.clew)):
            colour = self.clew_masks[index].mean_colour()
            if colour is not None:
                self.clew[index].colour = colour

        self.generation = 0
        initial_ssim, _ = self.score_clew()
        self.generation_ssim_scores = [initial_ssim]

        self.progress_image_generator = None
        if progress_dir is not None:
            self.progress_image_generator = ProgressImageGenerator(
                image, name, progress_dir)
            self.progress_image_generator.save_progress_image(
                self.clew, self.clew_masks, self.generation)

    def score(self, worm: CamoWorm, worm_mask: WormMask) -> float:
        """
        Calculates the score of the given worm.
        """
        raise Exception(
            "score is unimplemented for {}".format(type(self).__name__))

    def update(self, worm: CamoWorm, worm_mask: WormMask) -> Tuple[CamoWorm, WormMask]:
        """
        Updates the given camo worm.
        """
        raise Exception(
            "update is unimplemented for {}".format(type(self).__name__))

    def score_clew(self) -> tuple[float, list[float]]:
        """
        Compares the image generated by drawing all worms in the clew
        to the original image. This uses the structural similarity
        index to compare the images. A value of 1 is the best possible
        comparison, and -1 is the worst possible comparison.

        Returns the structural similarity and a list of the scores given
        to each worm.
        """
        generated = self.draw_clew()
        ssim = structural_similarity(self.image, generated, data_range=255)
        scores = np.array([self.score(w, m)
                          for w, m in zip(self.clew, self.clew_masks)])
        return ssim, scores

    def draw_clew(self, image=None):
        """
        Draws the worm masks of the worms in the clew into image.
        """
        if image is None:
            image = np.zeros(self.image.shape)
            bg_colour = find_median_colour(self.image)
            image += bg_colour
        else:
            image = image.copy()

        for worm, mask in zip(self.clew, self.clew_masks):
            mask.draw_into(image, worm.colour * 255.0)

        return image

    def run_generations(self, generations):
        """
        Runs the given number of generations of evolution.
        """
        for _ in range(generations):
            self.run_generation()

    def remove_worst_worm(self, worm_scores):
        """
        Removes the worst worm in the clew that is being evolved.
        """
        remove_index = np.argmin(worm_scores)
        del self.clew[remove_index]
        del self.clew_masks[remove_index]

    def add_new_random_worm(self, *, test_worms=1000):
        """
        Adds a new random worm to the clew that is being evolved.
        """
        best_worm = None
        best_worm_score = 0
        for i in range(test_worms):
            new_worm = CamoWorm.random(self.image.shape)
            new_worm_mask = WormMask(new_worm, self.image)
            new_worm.colour = new_worm_mask.median_colour()
            new_worm_score = self.score(new_worm, new_worm_mask)
            if best_worm is None or new_worm_score > best_worm_score:
                best_worm = new_worm
                best_worm_score = new_worm_score

        best_worm_mask, _ = locally_optimise_worm(self.image, best_worm)
        self.clew.append(best_worm)
        self.clew_masks.append(best_worm_mask)

    def run_generation(self):
        """
        Evolves a single generation.
        """
        start_time = time.perf_counter()
        self.generation += 1

        changed_worms = 0

        for index in range(len(self.clew)):
            worm = self.clew[index]
            worm_mask = self.clew_masks[index]
            new_worm, new_worm_mask = self.update(worm, worm_mask)
            self.clew[index] = new_worm
            self.clew_masks[index] = new_worm_mask
            if new_worm is not worm:
                changed_worms += 1

        # Loop in case we add or remove a worm, so we can re-calculate the scores.
        while True:
            new_ssim, worm_scores = self.score_clew()
            self.generation_ssim_scores.append(new_ssim)

            min_worm_score = np.min(worm_scores)
            max_worm_score = np.max(worm_scores)
            std_worm_score = np.std(worm_scores)
            mean_worm_score = np.mean(worm_scores)

            if changed_worms > 0:
                break

            # If no worms were changed, then add or remove worms.
            if min_worm_score < 0 and len(self.clew) > 0:
                self.remove_worst_worm(worm_scores)
                changed_worms += 1
                continue
            elif min_worm_score >= 0:
                self.add_new_random_worm()
                changed_worms += 1
                continue

            # No change.
            break

        # Save progress.
        if self.progress_image_generator is not None:
            self.progress_image_generator.save_progress_image(
                self.clew, self.clew_masks, self.generation)

        duration = time.perf_counter() - start_time
        print(
            "Generation {}: "
            "SSIM = {:.3f}, "
            "Scores = {:.0f} Â± {:.0f}, [{:.0f}, {:.0f}], "
            "Worms = {} "
            " (took {:.2f} sec)".format(
                self.generation,
                new_ssim,
                mean_worm_score, std_worm_score, min_worm_score, max_worm_score,
                len(self.clew),
                duration
            )
        )
